User and Role Endpoints Guide
=============================

This document serves as a summary of the API endpoints for user and role management. It is intended as a guide for front-end developers implementing the login and user management features in a React application.

---

User Endpoints:
---------------

1. Create User
   - Method: POST
   - URL: /users/
   - Description: Registers a new user with username, email, password, and optional roles (list of role IDs).
   - Request Body Example:
     {
       "username": "john_doe",
       "email": "john@example.com",
       "password": "securepassword",
       "roles": [1, 2]
     }

2. Read User
   - Method: GET
   - URL: /users/{user_id}
   - Description: Retrieves details of a specific user by their ID.

3. Read Users
   - Method: GET
   - URL: /users/
   - Description: Retrieves a list of users with optional skip and limit query parameters.

4. Update User
   - Method: PUT
   - URL: /users/{user_id}
   - Description: Updates user information such as username, email, and roles.
   - Request Body Example:
     {
       "username": "new_username",
       "email": "new_email@example.com",
       "roles": [1, 3]
     }

5. Change Password
   - Method: POST
   - URL: /users/change-password
   - Description: Changes the password for a user. Requires username, new password, and password confirmation. The API validates that the passwords match.
   - Request Body Example:
     {
       "username": "john_doe",
       "password": "newpassword",
       "password_confirmation": "newpassword"
     }

6. Forgot Password
   - Method: POST
   - URL: /users/forgot-password
   - Description: Checks if an email is associated with an account. If the email exists, it returns a valid response; otherwise, it returns an error.
   - Request Body Example:
     {
       "email": "john@example.com"
     }
   - Responses:
     - 200 OK: { "detail": "Email is valid" }
     - 404 Not Found: { "detail": "Email is invalid" }

7. Delete User
   - Method: DELETE
   - URL: /users/{user_id}
   - Description: Deletes a user by their ID.

---

Role Endpoints:
---------------

(These endpoints pertain to managing roles. Please refer to the roles API documentation for further details.)

1. Create Role
   - Method: POST
   - URL: /roles/
   - Description: Creates a new role with a name and description.

2. Read Role
   - Method: GET
   - URL: /roles/{role_id}
   - Description: Retrieves details of a specific role by its ID.

3. Read Roles
   - Method: GET
   - URL: /roles/
   - Description: Retrieves a list of all roles.

4. Update Role
   - Method: PUT
   - URL: /roles/{role_id}
   - Description: Updates the information of a specific role.

5. Delete Role
   - Method: DELETE
   - URL: /roles/{role_id}
   - Description: Deletes a role by its ID.

---

Usage Notes:
------------
- All endpoints follow RESTful conventions.
- Ensure that appropriate authentication and authorization mechanisms are in place for sensitive operations.
- The API returns errors with appropriate status codes (e.g., 400, 404) in case of invalid requests.

This guide should help in building the React-based front end to interact with the backend API effectively.